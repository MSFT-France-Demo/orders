name: üè≠ Build, üîê Scan and üõ´ deploy 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  NAMESPACE: bbl-amadeus
  REGISTRY_NAME: acrforctooffice.azurecr.io
  CLUSTER_NAME: akscluster
  CLUSTER_RESOURCE_GROUP: ctooffice
  APP_NAME: orders

jobs:

  Build:
    runs-on: ubuntu-latest
    environment: dev #only for OICD purpose 
    env:
      GROUP: githubactionsdemos
      COMMIT: ${{ github.sha }}
      REPO: orders
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B -DskipTests package --file pom.xml

      - run: docker build . -f docker/orders/Dockerfilewdd -t acrforctooffice.azurecr.io/orders:${{ github.sha }}
        
      - uses: Azure/container-scan@v0
        name: Scan image for vulnerabilities
        id: container-scan
        continue-on-error: true      
        with:
          image-name: acrforctooffice.azurecr.io/orders:${{ github.sha }}

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Login to ACR'
        run: az acr login --name acrforctooffice

      - run: docker push ${{ env.REGISTRY_NAME }}/orders:${{ github.sha }}

      - name: Post logs to appinsights
        uses: Azure/publish-security-assessments@v0
        with: 
          scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
          connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
          subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }}       

  DeployDev:
    name: üö≤ Deploy to Dev 
    if: github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: dev
      url: 'http://dev.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 

    # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

        # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -  

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            ${{ github.workspace }}/manifests/deployment.yaml
            ${{ github.workspace }}/manifests/service.yaml
          images: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          namespace: ${{ env.NAMESPACE }}


  DeployStaging:
    name: üõµ Deploy to Staging 
    if: github.event.ref == 'refs/heads/master'
    needs: [Build]
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: 'http://test.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 

  DeployProd:
    name: üöó Deploy to Production 
    needs: [DeployStaging]
    runs-on: ubuntu-latest
    environment: 
      name: prod
      url: 'http://www.myapp.com'
    steps:
      - name: Deploy
        run: echo I am deploying! 
